Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.10.0 Build 20230609_000000

Compiler options: -g -std=c++20 -Wall -xHost -O2 -qopenmp -o binning-icc -qopt-report=5 -qopt-report-file=binning-icc.optrpt

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: BinParticles(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticles(const InputDataType &, BinsType &)) [1/1=100.0%] binning.cpp(9,73)
  -> EXTERN: (14,46) cosf(float) noexcept(true)
  -> EXTERN: (15,46) sinf(float) noexcept(true)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at binning.cpp(11,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at binning.cpp(11,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at binning.cpp(11,3)
      remark #15388: vectorization support: reference at (11:3) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 5
      remark #15309: vectorization support: normalized vectorization overhead 0.120
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 0.710 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 10  
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END
LOOP END

LOOP BEGIN at binning.cpp(11,3)
   remark #15415: vectorization support: non-unit strided load was generated for the variable <inputData->particles->phi[i]>, stride is 2   [ binning.cpp(14,50) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <inputData->particles->r[i]>, stride is 2   [ binning.cpp(14,21) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <inputData->particles->r[i]>, stride is 2   [ binning.cpp(15,21) ]
   remark #15416: vectorization support: irregularly indexed store was generated for the variable <at (22:7)>, part of index is read from memory   [ binning.cpp(22,7) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <at (22:7)>, part of index is read from memory   [ binning.cpp(22,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.008
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15452: unmasked strided loads: 3 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 237 
   remark #15477: vector cost: 60.870 
   remark #15478: estimated potential speedup: 3.740 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #15499: histogram: 1 
LOOP END

LOOP BEGIN at binning.cpp(11,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at binning.cpp(11,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at binning.cpp(11,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between outputBins[$i1][$i2] (11:3) and *outputBins (11:3)
      remark #15346: vector dependence: assumed ANTI dependence between *outputBins (11:3) and outputBins[$i1][$i2] (11:3)
      remark #25436: completely unrolled by 10  
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END
LOOP END

LOOP BEGIN at binning.cpp(11,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at binning.cpp(11,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between at (11:3) and at (11:3)
      remark #15346: vector dependence: assumed ANTI dependence between at (11:3) and at (11:3)
      remark #25436: completely unrolled by 10  
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END

   LOOP BEGIN at binning.cpp(11,3)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

binning.cpp(9,73):remark #34051: REGISTER ALLOCATION : [_Z12BinParticlesRK13InputDataTypeRA10_A10_i] binning.cpp:9

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   44[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm27 k1-k2]
        
    Routine temporaries
        Total         :     407
            Global    :      46
            Local     :     361
        Regenerable   :      69
        Spilled       :       2
        
    Routine stack
        Variables     :     440 bytes*
            Reads     :     104 [0.00e+00 ~ 0.0%]
            Writes    :     107 [4.36e+00 ~ 4.4%]
        Spills        :      56 bytes*
            Reads     :      18 [2.13e+00 ~ 2.1%]
            Writes    :      18 [3.80e+00 ~ 3.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
