Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.10.0 Build 20230609_000000

Compiler options: -g -std=c++20 -Wall -xHost -O2 -qopenmp -o nbody-icc -qopt-report=5 -qopt-report-file=nbody-icc.optrpt

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, const char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, const char **)) [1/27=3.7%] nbody.cpp(131,45)
  -> INLINE (MANUAL): (134,38) atoi(const char *) noexcept(true) (isz = 7) (sz = 14)
    -> EXTERN: /usr/include/stdlib.h:(363,16) strtol(const char *, char **, int) noexcept(true)
  -> EXTERN: (141,45) operator new[](std::size_t)
  -> EXTERN: (141,45) __cxa_throw_bad_array_new_length()
  -> INLINE (MANUAL): (144,21) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::mersenne_twister_engine(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *, std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::result_type) (isz = 53) (sz = 60)
    -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(531,9) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::seed(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *, std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::result_type) (isz = 53) (sz = 60)
      -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(327,17) std::__detail::__mod<uint_fast32_t, 4294967296UL, 1UL, 0UL>(uint_fast32_t) (isz = 5) (sz = 12)
        -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(156,13) std::__detail::_Mod<uint_fast32_t, 4294967296UL, 1UL, 0UL, true, true>::__calc(uint_fast32_t) (isz = 3) (sz = 10)
      -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(335,11) std::__detail::__mod<uint_fast32_t, 624UL, 1UL, 0UL>(uint_fast32_t) (isz = 5) (sz = 12)
        -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(156,13) std::__detail::_Mod<uint_fast32_t, 624UL, 1UL, 0UL, true, true>::__calc(uint_fast32_t) (isz = 3) (sz = 10)
      -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(336,16) std::__detail::__mod<uint_fast32_t, 4294967296UL, 1UL, 0UL>(uint_fast32_t) (isz = 5) (sz = 12)
        -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(156,13) std::__detail::_Mod<uint_fast32_t, 4294967296UL, 1UL, 0UL, true, true>::__calc(uint_fast32_t) (isz = 3) (sz = 10)
  -> INLINE (MANUAL): (145,51) std::uniform_real_distribution<float>::uniform_real_distribution(std::uniform_real_distribution<float> *, float, float) (isz = 6) (sz = 15)
    -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(1801,7) std::uniform_real_distribution<float>::param_type::param_type(std::uniform_real_distribution<float>::param_type *, float, float) (isz = 4) (sz = 12)
  -> INLINE (MANUAL): (147,33) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &) (isz = 208) (sz = 217)
    -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(1861,24) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &, const std::uniform_real_distribution<float>::param_type &) (isz = 204) (sz = 215)
      -> INLINE (MANUAL): (1869,14) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::_Adaptor(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *, std::mt19937 &) (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,19) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::operator()(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *) (isz = 188) (sz = 195)
        -> INLINE (MANUAL): (190,11) std::generate_canonical<std::uniform_real_distribution<float>::result_type, 24UL, std::mt19937>(std::mt19937 &) (isz = 186) (sz = 193)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,30) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,46) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3355,26) std::max<std::size_t>(const std::size_t &, const std::size_t &) (isz = 2) (sz = 12)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3362,29) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::operator()(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 123) (sz = 130)
            -> INLINE (MANUAL): (456,2) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::_M_gen_rand(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 95) (sz = 100)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3369,12) std::nextafter(float, float) (isz = 1) (sz = 10)
            -> EXTERN: /usr/include/c++/13/cmath:(1661,12) __builtin_nextafterf(float, float)
      -> INLINE (MANUAL): (1870,29) std::uniform_real_distribution<float>::param_type::b(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,39) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,51) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (148,33) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &) (isz = 208) (sz = 217)
    -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(1861,24) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &, const std::uniform_real_distribution<float>::param_type &) (isz = 204) (sz = 215)
      -> INLINE (MANUAL): (1869,14) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::_Adaptor(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *, std::mt19937 &) (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,19) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::operator()(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *) (isz = 188) (sz = 195)
        -> INLINE (MANUAL): (190,11) std::generate_canonical<std::uniform_real_distribution<float>::result_type, 24UL, std::mt19937>(std::mt19937 &) (isz = 186) (sz = 193)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,30) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,46) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3355,26) std::max<std::size_t>(const std::size_t &, const std::size_t &) (isz = 2) (sz = 12)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3362,29) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::operator()(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 123) (sz = 130)
            -> INLINE (MANUAL): (456,2) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::_M_gen_rand(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 95) (sz = 100)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3369,12) std::nextafter(float, float) (isz = 1) (sz = 10)
            -> EXTERN: /usr/include/c++/13/cmath:(1661,12) __builtin_nextafterf(float, float)
      -> INLINE (MANUAL): (1870,29) std::uniform_real_distribution<float>::param_type::b(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,39) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,51) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (149,33) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &) (isz = 208) (sz = 217)
    -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(1861,24) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &, const std::uniform_real_distribution<float>::param_type &) (isz = 204) (sz = 215)
      -> INLINE (MANUAL): (1869,14) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::_Adaptor(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *, std::mt19937 &) (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,19) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::operator()(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *) (isz = 188) (sz = 195)
        -> INLINE (MANUAL): (190,11) std::generate_canonical<std::uniform_real_distribution<float>::result_type, 24UL, std::mt19937>(std::mt19937 &) (isz = 186) (sz = 193)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,30) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,46) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3355,26) std::max<std::size_t>(const std::size_t &, const std::size_t &) (isz = 2) (sz = 12)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3362,29) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::operator()(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 123) (sz = 130)
            -> INLINE (MANUAL): (456,2) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::_M_gen_rand(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 95) (sz = 100)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3369,12) std::nextafter(float, float) (isz = 1) (sz = 10)
            -> EXTERN: /usr/include/c++/13/cmath:(1661,12) __builtin_nextafterf(float, float)
      -> INLINE (MANUAL): (1870,29) std::uniform_real_distribution<float>::param_type::b(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,39) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,51) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (150,34) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &) (isz = 208) (sz = 217)
    -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(1861,24) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &, const std::uniform_real_distribution<float>::param_type &) (isz = 204) (sz = 215)
      -> INLINE (MANUAL): (1869,14) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::_Adaptor(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *, std::mt19937 &) (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,19) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::operator()(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *) (isz = 188) (sz = 195)
        -> INLINE (MANUAL): (190,11) std::generate_canonical<std::uniform_real_distribution<float>::result_type, 24UL, std::mt19937>(std::mt19937 &) (isz = 186) (sz = 193)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,30) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,46) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3355,26) std::max<std::size_t>(const std::size_t &, const std::size_t &) (isz = 2) (sz = 12)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3362,29) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::operator()(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 123) (sz = 130)
            -> INLINE (MANUAL): (456,2) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::_M_gen_rand(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 95) (sz = 100)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3369,12) std::nextafter(float, float) (isz = 1) (sz = 10)
            -> EXTERN: /usr/include/c++/13/cmath:(1661,12) __builtin_nextafterf(float, float)
      -> INLINE (MANUAL): (1870,29) std::uniform_real_distribution<float>::param_type::b(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,39) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,51) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (151,34) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &) (isz = 208) (sz = 217)
    -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(1861,24) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &, const std::uniform_real_distribution<float>::param_type &) (isz = 204) (sz = 215)
      -> INLINE (MANUAL): (1869,14) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::_Adaptor(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *, std::mt19937 &) (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,19) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::operator()(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *) (isz = 188) (sz = 195)
        -> INLINE (MANUAL): (190,11) std::generate_canonical<std::uniform_real_distribution<float>::result_type, 24UL, std::mt19937>(std::mt19937 &) (isz = 186) (sz = 193)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,30) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,46) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3355,26) std::max<std::size_t>(const std::size_t &, const std::size_t &) (isz = 2) (sz = 12)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3362,29) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::operator()(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 123) (sz = 130)
            -> INLINE (MANUAL): (456,2) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::_M_gen_rand(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 95) (sz = 100)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3369,12) std::nextafter(float, float) (isz = 1) (sz = 10)
            -> EXTERN: /usr/include/c++/13/cmath:(1661,12) __builtin_nextafterf(float, float)
      -> INLINE (MANUAL): (1870,29) std::uniform_real_distribution<float>::param_type::b(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,39) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,51) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (152,34) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &) (isz = 208) (sz = 217)
    -> INLINE (MANUAL): /usr/include/c++/13/bits/random.h:(1861,24) std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &, const std::uniform_real_distribution<float>::param_type &) (isz = 204) (sz = 215)
      -> INLINE (MANUAL): (1869,14) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::_Adaptor(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *, std::mt19937 &) (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,19) std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::operator()(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *) (isz = 188) (sz = 195)
        -> INLINE (MANUAL): (190,11) std::generate_canonical<std::uniform_real_distribution<float>::result_type, 24UL, std::mt19937>(std::mt19937 &) (isz = 186) (sz = 193)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,30) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3354,46) std::log(long double) (isz = 1) (sz = 8)
            -> EXTERN: /usr/include/c++/13/cmath:(343,12) __builtin_logl(long double)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3355,26) std::max<std::size_t>(const std::size_t &, const std::size_t &) (isz = 2) (sz = 12)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3362,29) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::operator()(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 123) (sz = 130)
            -> INLINE (MANUAL): (456,2) std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::_M_gen_rand(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *) (isz = 95) (sz = 100)
          -> INLINE (MANUAL): /usr/include/c++/13/bits/random.tcc:(3369,12) std::nextafter(float, float) (isz = 1) (sz = 10)
            -> EXTERN: /usr/include/c++/13/cmath:(1661,12) __builtin_nextafterf(float, float)
      -> INLINE (MANUAL): (1870,29) std::uniform_real_distribution<float>::param_type::b(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,39) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
      -> INLINE (MANUAL): (1870,51) std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const (isz = 0) (sz = 6)
  -> EXTERN: (156,55) operator new[](std::size_t)
  -> EXTERN: (156,55) __cxa_throw_bad_array_new_length()
  -> (162,3) MoveParticles_Orig(int, ParticleType *, float) (isz = 150) (sz = 159)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> EXTERN: (165,3) printf(const char *, ...)
  -> EXTERN: (166,3) printf(const char *, ...)
  -> EXTERN: (170,3) printf(const char *, ...)
  -> EXTERN: (170,92) fflush(FILE *)
  -> EXTERN: (173,27) omp_get_wtime()
  -> INLINE: (174,5) MoveParticles(int, ParticleType *, float) (isz = 147) (sz = 156)
    -> EXTERN: (76,31) powf(float, float) noexcept(true)
  -> EXTERN: (175,25) omp_get_wtime()
  -> EXTERN: (185,5) printf(const char *, ...)
  -> EXTERN: (187,5) fflush(FILE *)
  -> (191,12) compare_particle_arrays(int, const ParticleType *, const ParticleType *) (isz = 249) (sz = 266)
     [[ Inlining would exceed -inline-max-size value (266>230) <2>]]
  -> EXTERN: (192,9) printf(const char *, ...)
  -> EXTERN: (193,9) printf(const char *, ...)
  -> EXTERN: (194,9) printf(const char *, ...)
  -> EXTERN: (201,3) printf(const char *, ...)
  -> EXTERN: (202,3) printf(const char *, ...)
  -> EXTERN: (204,3) printf(const char *, ...)
  -> EXTERN: (205,3) printf(const char *, ...)
  -> EXTERN: (206,3) printf(const char *, ...)
  -> EXTERN: (208,3) operator delete[](void *) noexcept
  -> EXTERN: (209,3) operator delete[](void *) noexcept


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(330,7) inlined into nbody.cpp(144,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between generator._M_x[__i] (336:4) and generator._M_x[__i-1] (332:20)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(3360,7) inlined into nbody.cpp(147,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(147,33)
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.188
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 8.000 
      remark #15478: estimated potential speedup: 2.310 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=56
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(409,7) inlined into nbody.cpp(147,33)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between generator._M_x[__k] (413:4) and generator._M_x[__k+?] (413:4)
      remark #15346: vector dependence: assumed ANTI dependence between generator._M_x[__k+?] (413:4) and generator._M_x[__k] (413:4)
      remark #25438: unrolled without remainder by 2  
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(147,33)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.267
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(3360,7) inlined into nbody.cpp(148,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(148,33)
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.188
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 8.000 
      remark #15478: estimated potential speedup: 2.310 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=56
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(409,7) inlined into nbody.cpp(148,33)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between generator._M_x[__k] (413:4) and generator._M_x[__k+?] (413:4)
      remark #15346: vector dependence: assumed ANTI dependence between generator._M_x[__k+?] (413:4) and generator._M_x[__k] (413:4)
      remark #25438: unrolled without remainder by 2  
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(148,33)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.267
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(3360,7) inlined into nbody.cpp(149,33)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(149,33)
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.188
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 8.000 
      remark #15478: estimated potential speedup: 2.310 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=56
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(409,7) inlined into nbody.cpp(149,33)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between generator._M_x[__k] (413:4) and generator._M_x[__k+?] (413:4)
      remark #15346: vector dependence: assumed ANTI dependence between generator._M_x[__k+?] (413:4) and generator._M_x[__k] (413:4)
      remark #25438: unrolled without remainder by 2  
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(149,33)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.267
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(3360,7) inlined into nbody.cpp(150,34)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(150,34)
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.188
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 8.000 
      remark #15478: estimated potential speedup: 2.310 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=56
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(409,7) inlined into nbody.cpp(150,34)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between generator._M_x[__k] (413:4) and generator._M_x[__k+?] (413:4)
      remark #15346: vector dependence: assumed ANTI dependence between generator._M_x[__k+?] (413:4) and generator._M_x[__k] (413:4)
      remark #25438: unrolled without remainder by 2  
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(150,34)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.267
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(3360,7) inlined into nbody.cpp(151,34)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(151,34)
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.188
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 8.000 
      remark #15478: estimated potential speedup: 2.310 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=56
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(409,7) inlined into nbody.cpp(151,34)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between generator._M_x[__k] (413:4) and generator._M_x[__k+?] (413:4)
      remark #15346: vector dependence: assumed ANTI dependence between generator._M_x[__k+?] (413:4) and generator._M_x[__k] (413:4)
      remark #25438: unrolled without remainder by 2  
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(151,34)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.267
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(3360,7) inlined into nbody.cpp(152,34)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(152,34)
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.188
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 8.000 
      remark #15478: estimated potential speedup: 2.310 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=56
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(409,7) inlined into nbody.cpp(152,34)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between generator._M_x[__k] (413:4) and generator._M_x[__k+?] (413:4)
      remark #15346: vector dependence: assumed ANTI dependence between generator._M_x[__k+?] (413:4) and generator._M_x[__k] (413:4)
      remark #25438: unrolled without remainder by 2  
   LOOP END

   LOOP BEGIN at /usr/include/c++/13/bits/random.tcc(455,7) inlined into nbody.cpp(152,34)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(403,22) ]
      remark #15389: vectorization support: reference generator._M_x[__k+1] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(404,10) ]
      remark #15388: vectorization support: reference generator._M_x[__k] has aligned access   [ /usr/include/c++/13/bits/random.tcc(405,4) ]
      remark #15389: vectorization support: reference generator._M_x[__k+397] has unaligned access   [ /usr/include/c++/13/bits/random.tcc(405,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.267
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at nbody.cpp(158,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15416: vectorization support: non-unit strided store was generated for the variable <$i1->x>, stride is 6   [ nbody.cpp(159,5) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <$i1->x>, stride is 6   [ nbody.cpp(159,29) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <$i1->y>, stride is 6   [ nbody.cpp(159,5) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <$i1->y>, stride is 6   [ nbody.cpp(159,29) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <$i1->z>, stride is 6   [ nbody.cpp(159,5) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <$i1->z>, stride is 6   [ nbody.cpp(159,29) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <$i1->vx>, stride is 6   [ nbody.cpp(159,5) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <$i1->vx>, stride is 6   [ nbody.cpp(159,29) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <$i1->vy>, stride is 6   [ nbody.cpp(159,5) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <$i1->vy>, stride is 6   [ nbody.cpp(159,29) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <$i1->vz>, stride is 6   [ nbody.cpp(159,5) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <$i1->vz>, stride is 6   [ nbody.cpp(159,29) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 6 
   remark #15453: unmasked strided stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 15 
   remark #15477: vector cost: 51.000 
   remark #15478: estimated potential speedup: 0.290 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at nbody.cpp(60,3) inlined into nbody.cpp(174,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #25236: Loop with pragma of trip count = 16384 ignored for large value
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.cpp(66,5) inlined into nbody.cpp(174,5)
      remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->x[j]>, stride is 6   [ nbody.cpp(72,24) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->y[j]>, stride is 6   [ nbody.cpp(73,24) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->z[j]>, stride is 6   [ nbody.cpp(74,24) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.427
      remark #15355: vectorization support: Fx is float type reduction   [ nbody.cpp(63,14) ]
      remark #15355: vectorization support: Fy is float type reduction   [ nbody.cpp(63,22) ]
      remark #15355: vectorization support: Fz is float type reduction   [ nbody.cpp(63,30) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15452: unmasked strided loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 174 
      remark #15477: vector cost: 28.120 
      remark #15478: estimated potential speedup: 5.880 
      remark #15486: divides: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody.cpp(66,5) inlined into nbody.cpp(174,5)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.125
      remark #15355: vectorization support: Fx is float type reduction   [ nbody.cpp(63,14) ]
      remark #15355: vectorization support: Fy is float type reduction   [ nbody.cpp(63,22) ]
      remark #15355: vectorization support: Fz is float type reduction   [ nbody.cpp(63,30) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15452: unmasked strided loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 174 
      remark #15477: vector cost: 28.120 
      remark #15478: estimated potential speedup: 5.880 
      remark #15486: divides: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at nbody.cpp(92,3) inlined into nbody.cpp(174,5)
   remark #15416: vectorization support: non-unit strided store was generated for the variable <particle->x[i]>, stride is 6   [ nbody.cpp(93,5) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->x[i]>, stride is 6   [ nbody.cpp(93,5) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->vx[i]>, stride is 6   [ nbody.cpp(93,23) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <particle->y[i]>, stride is 6   [ nbody.cpp(94,5) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->y[i]>, stride is 6   [ nbody.cpp(94,5) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->vy[i]>, stride is 6   [ nbody.cpp(94,23) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <particle->z[i]>, stride is 6   [ nbody.cpp(95,5) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->z[i]>, stride is 6   [ nbody.cpp(95,5) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->vz[i]>, stride is 6   [ nbody.cpp(95,23) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15452: unmasked strided loads: 6 
   remark #15453: unmasked strided stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 29 
   remark #15477: vector cost: 19.120 
   remark #15478: estimated potential speedup: 1.480 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at nbody.cpp(92,3) inlined into nbody.cpp(174,5)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.238
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 6 
   remark #15453: unmasked strided stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 29 
   remark #15477: vector cost: 19.120 
   remark #15478: estimated potential speedup: 1.480 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at nbody.cpp(92,3) inlined into nbody.cpp(174,5)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at nbody.cpp(146,3)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

LOOP BEGIN at nbody.cpp(171,3)
   remark #15532: loop was not vectorized: compile time constraints prevent loop optimization. Consider using -O3.
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/13/bits/random.tcc(404,26):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (32, 0)
/usr/include/c++/13/bits/random.tcc(404,26):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/usr/include/c++/13/bits/random.tcc(404,26):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (32, 0)
/usr/include/c++/13/bits/random.tcc(404,26):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/usr/include/c++/13/bits/random.tcc(404,26):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (32, 0)
/usr/include/c++/13/bits/random.tcc(404,26):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/usr/include/c++/13/bits/random.tcc(404,26):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (32, 0)
/usr/include/c++/13/bits/random.tcc(404,26):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/usr/include/c++/13/bits/random.tcc(404,26):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (32, 0)
/usr/include/c++/13/bits/random.tcc(404,26):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
/usr/include/c++/13/bits/random.tcc(404,26):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (32, 0)
/usr/include/c++/13/bits/random.tcc(404,26):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
nbody.cpp(131,45):remark #34051: REGISTER ALLOCATION : [main] nbody.cpp:131

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   56[ rax rdx rcx rbx rsi rdi r8-r15 mm0-mm2 zmm0-zmm31 k1-k7]
        
    Routine temporaries
        Total         :     914
            Global    :     152
            Local     :     762
        Regenerable   :     118
        Spilled       :      25
        
    Routine stack
        Variables     :    5028 bytes*
            Reads     :     129 [1.64e+01 ~ 16.4%]
            Writes    :      59 [6.36e+00 ~ 6.4%]
        Spills        :     168 bytes*
            Reads     :      38 [3.96e-02 ~ 0.0%]
            Writes    :      36 [2.61e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: compare_particle_arrays(int, const ParticleType *, const ParticleType *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (compare_particle_arrays(int, const ParticleType *, const ParticleType *)) [2/27=7.4%] nbody.cpp(101,104)
  -> INLINE (MANUAL): (103,9) std::abs(float) (isz = 0) (sz = 7)
  -> EXTERN: (104,7) printf(const char *, ...)
  -> INLINE (MANUAL): (104,52) std::abs(float) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (107,9) std::abs(float) (isz = 0) (sz = 7)
  -> EXTERN: (108,7) printf(const char *, ...)
  -> INLINE (MANUAL): (108,52) std::abs(float) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (111,9) std::abs(float) (isz = 0) (sz = 7)
  -> EXTERN: (112,7) printf(const char *, ...)
  -> INLINE (MANUAL): (112,52) std::abs(float) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (115,9) std::abs(float) (isz = 0) (sz = 7)
  -> EXTERN: (116,7) printf(const char *, ...)
  -> INLINE (MANUAL): (116,55) std::abs(float) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (119,9) std::abs(float) (isz = 0) (sz = 7)
  -> EXTERN: (120,7) printf(const char *, ...)
  -> INLINE (MANUAL): (120,55) std::abs(float) (isz = 0) (sz = 7)
  -> INLINE (MANUAL): (123,9) std::abs(float) (isz = 0) (sz = 7)
  -> EXTERN: (124,7) printf(const char *, ...)
  -> INLINE (MANUAL): (124,55) std::abs(float) (isz = 0) (sz = 7)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.cpp(102,3)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ nbody.cpp(105,14) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody.cpp(101,104):remark #34051: REGISTER ALLOCATION : [_Z23compare_particle_arraysiPK12ParticleTypeS1_] nbody.cpp:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi zmm0-zmm4 zmm16-zmm17]
        
    Routine temporaries
        Total         :     116
            Global    :      28
            Local     :      88
        Regenerable   :      26
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MoveParticles_Orig(int, ParticleType *, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MoveParticles_Orig(int, ParticleType *, float)) [3/27=11.1%] nbody.cpp(15,93)
  -> INLINE (MANUAL): (34,31) std::pow<float, double>(float, double) (isz = 2) (sz = 11)
    -> EXTERN: /usr/include/c++/13/cmath:(418,14) pow(double, double) noexcept(true)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.cpp(18,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.cpp(24,5)
      remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->x[j]>, stride is 6   [ nbody.cpp(30,24) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->y[j]>, stride is 6   [ nbody.cpp(31,24) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->z[j]>, stride is 6   [ nbody.cpp(32,24) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.315
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 2   [ nbody.cpp(34,29) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ nbody.cpp(34,29) ]
      remark #15355: vectorization support: Fx is float type reduction   [ nbody.cpp(21,14) ]
      remark #15355: vectorization support: Fy is float type reduction   [ nbody.cpp(21,22) ]
      remark #15355: vectorization support: Fz is float type reduction   [ nbody.cpp(21,30) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15452: unmasked strided loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 177 
      remark #15477: vector cost: 38.120 
      remark #15478: estimated potential speedup: 4.420 
      remark #15486: divides: 3 
      remark #15487: type converts: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody.cpp(24,5)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.086
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 2   [ nbody.cpp(34,29) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ nbody.cpp(34,29) ]
      remark #15355: vectorization support: Fx is float type reduction   [ nbody.cpp(21,14) ]
      remark #15355: vectorization support: Fy is float type reduction   [ nbody.cpp(21,22) ]
      remark #15355: vectorization support: Fz is float type reduction   [ nbody.cpp(21,30) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15452: unmasked strided loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 177 
      remark #15477: vector cost: 38.120 
      remark #15478: estimated potential speedup: 4.420 
      remark #15486: divides: 3 
      remark #15487: type converts: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at nbody.cpp(50,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at nbody.cpp(51,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between (particle+i*24)[_2] (51:5) and *(particle+i*24+_2*4+12) (51:5)
      remark #15346: vector dependence: assumed ANTI dependence between *(particle+i*24+_2*4+12) (51:5) and (particle+i*24)[_2] (51:5)
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody.cpp(15,93):remark #34051: REGISTER ALLOCATION : [_Z18MoveParticles_OrigiP12ParticleTypef] nbody.cpp:15

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rsi rdi r8-r12 zmm0-zmm31 k1-k4]
        
    Routine temporaries
        Total         :     153
            Global    :      34
            Local     :     119
        Regenerable   :      15
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [3.00e-02 ~ 0.0%]
            Writes    :       1 [1.33e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: atoi(const char *) noexcept(true)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (atoi(const char *) noexcept(true))/usr/include/stdlib.h(362,1)

===========================================================================

Begin optimization report for: MoveParticles(int, ParticleType *, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MoveParticles(int, ParticleType *, float)) [5/27=18.5%] nbody.cpp(57,88)
  -> EXTERN: (76,31) powf(float, float) noexcept(true)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.cpp(60,3)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.cpp(66,5)
      remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->x[j]>, stride is 6   [ nbody.cpp(72,24) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->y[j]>, stride is 6   [ nbody.cpp(73,24) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <particle->z[j]>, stride is 6   [ nbody.cpp(74,24) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.426
      remark #15355: vectorization support: Fx is float type reduction   [ nbody.cpp(63,14) ]
      remark #15355: vectorization support: Fy is float type reduction   [ nbody.cpp(63,22) ]
      remark #15355: vectorization support: Fz is float type reduction   [ nbody.cpp(63,30) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15452: unmasked strided loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 164 
      remark #15477: vector cost: 27.000 
      remark #15478: estimated potential speedup: 5.770 
      remark #15486: divides: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody.cpp(66,5)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.116
      remark #15355: vectorization support: Fx is float type reduction   [ nbody.cpp(63,14) ]
      remark #15355: vectorization support: Fy is float type reduction   [ nbody.cpp(63,22) ]
      remark #15355: vectorization support: Fz is float type reduction   [ nbody.cpp(63,30) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15452: unmasked strided loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 164 
      remark #15477: vector cost: 27.000 
      remark #15478: estimated potential speedup: 5.770 
      remark #15486: divides: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at nbody.cpp(92,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at nbody.cpp(93,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between (particle+i*24)[_2] (93:5) and *(particle+i*24+_2*4+12) (93:5)
      remark #15346: vector dependence: assumed ANTI dependence between *(particle+i*24+_2*4+12) (93:5) and (particle+i*24)[_2] (93:5)
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody.cpp(57,88):remark #34051: REGISTER ALLOCATION : [_Z13MoveParticlesiP12ParticleTypef] nbody.cpp:57

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rsi rdi r8-r12 zmm0-zmm31 k1-k4]
        
    Routine temporaries
        Total         :     149
            Global    :      35
            Local     :     114
        Regenerable   :      16
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [3.13e-02 ~ 0.0%]
            Writes    :       1 [1.39e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::mersenne_twister_engine(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *, std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::result_type)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::mersenne_twister_engine(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *, std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::result_type)) /usr/include/c++/13/bits/random.h(531,7)

===========================================================================

Begin optimization report for: std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::seed(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *, std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::result_type)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::seed(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *, std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::result_type)) /usr/include/c++/13/bits/random.tcc(326,5)

===========================================================================

Begin optimization report for: std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::operator()(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::operator()(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *)) /usr/include/c++/13/bits/random.tcc(453,5)

===========================================================================

Begin optimization report for: std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::_M_gen_rand(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>::_M_gen_rand(std::mersenne_twister_engine<uint_fast32_t, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL> *)) /usr/include/c++/13/bits/random.tcc(397,5)

===========================================================================

Begin optimization report for: std::uniform_real_distribution<float>::uniform_real_distribution(std::uniform_real_distribution<float> *, float, float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::uniform_real_distribution<float>::uniform_real_distribution(std::uniform_real_distribution<float> *, float, float)) /usr/include/c++/13/bits/random.h(1803,7)

===========================================================================

Begin optimization report for: std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &)) /usr/include/c++/13/bits/random.h(1861,9)

===========================================================================

Begin optimization report for: std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &, const std::uniform_real_distribution<float>::param_type &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::uniform_real_distribution<float>::operator()<std::mt19937>(std::uniform_real_distribution<float> *, std::mt19937 &, const std::uniform_real_distribution<float>::param_type &)) /usr/include/c++/13/bits/random.h(1867,2)

===========================================================================

Begin optimization report for: std::uniform_real_distribution<float>::param_type::param_type(std::uniform_real_distribution<float>::param_type *, float, float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::uniform_real_distribution<float>::param_type::param_type(std::uniform_real_distribution<float>::param_type *, float, float)) /usr/include/c++/13/bits/random.h(1761,2)

===========================================================================

Begin optimization report for: std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::uniform_real_distribution<float>::param_type::a(const std::uniform_real_distribution<float>::param_type *) const) /usr/include/c++/13/bits/random.h(1767,2)

===========================================================================

Begin optimization report for: std::uniform_real_distribution<float>::param_type::b(const std::uniform_real_distribution<float>::param_type *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::uniform_real_distribution<float>::param_type::b(const std::uniform_real_distribution<float>::param_type *) const) /usr/include/c++/13/bits/random.h(1771,2)

===========================================================================

Begin optimization report for: std::__detail::_Mod<uint_fast32_t, 4294967296UL, 1UL, 0UL, true, true>::__calc(uint_fast32_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__detail::_Mod<uint_fast32_t, 4294967296UL, 1UL, 0UL, true, true>::__calc(uint_fast32_t)) /usr/include/c++/13/bits/random.h(138,2)

===========================================================================

Begin optimization report for: std::__detail::_Mod<uint_fast32_t, 624UL, 1UL, 0UL, true, true>::__calc(uint_fast32_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__detail::_Mod<uint_fast32_t, 624UL, 1UL, 0UL, true, true>::__calc(uint_fast32_t)) /usr/include/c++/13/bits/random.h(138,2)

===========================================================================

Begin optimization report for: std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::_Adaptor(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *, std::mt19937 &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::_Adaptor(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *, std::mt19937 &)) /usr/include/c++/13/bits/random.h(172,14)

===========================================================================

Begin optimization report for: std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::operator()(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type>::operator()(std::__detail::_Adaptor<std::mt19937, std::uniform_real_distribution<float>::result_type> *)) /usr/include/c++/13/bits/random.h(189,2)

===========================================================================

Begin optimization report for: std::__detail::__mod<uint_fast32_t, 4294967296UL, 1UL, 0UL>(uint_fast32_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__detail::__mod<uint_fast32_t, 4294967296UL, 1UL, 0UL>(uint_fast32_t)) /usr/include/c++/13/bits/random.h(149,7)

===========================================================================

Begin optimization report for: std::__detail::__mod<uint_fast32_t, 624UL, 1UL, 0UL>(uint_fast32_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__detail::__mod<uint_fast32_t, 624UL, 1UL, 0UL>(uint_fast32_t)) /usr/include/c++/13/bits/random.h(149,7)

===========================================================================

Begin optimization report for: std::abs(float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::abs(float)) /usr/include/c++/13/bits/std_abs.h(76,3)

===========================================================================

Begin optimization report for: std::log(long double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::log(long double)) /usr/include/c++/13/cmath(343,3)

===========================================================================

Begin optimization report for: std::nextafter(float, float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::nextafter(float, float)) /usr/include/c++/13/cmath(1661,3)

===========================================================================

Begin optimization report for: std::pow<float, double>(float, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::pow<float, double>(float, double)) [25/27=92.6%] /usr/include/c++/13/cmath(416,5)
  -> EXTERN: (418,14) pow(double, double) noexcept(true)


    Report from: Code generation optimizations [cg]

/usr/include/c++/13/cmath(416,5):remark #34051: REGISTER ALLOCATION : [_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_] /usr/include/c++/13/cmath:416

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ zmm0-zmm1]
        
    Routine temporaries
        Total         :      16
            Global    :       7
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::generate_canonical<std::uniform_real_distribution<float>::result_type, 24UL, std::mt19937>(std::mt19937 &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::generate_canonical<std::uniform_real_distribution<float>::result_type, 24UL, std::mt19937>(std::mt19937 &)) /usr/include/c++/13/bits/random.tcc(3345,5)

===========================================================================

Begin optimization report for: std::max<std::size_t>(const std::size_t &, const std::size_t &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::max<std::size_t>(const std::size_t &, const std::size_t &)) /usr/include/c++/13/bits/stl_algobase.h(255,5)

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "inline __attribute__((always_inline))" to the declaration of
    the called function or add "#pragma forceinline" before the call site.

<2> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

