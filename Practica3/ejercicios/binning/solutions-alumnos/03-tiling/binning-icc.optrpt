Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.10.0 Build 20230609_000000

Compiler options: -g -std=c++20 -Wall -xHost -O2 -qopenmp -o binning-icc -qopt-report=5 -qopt-report-file=binning-icc.optrpt

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: BinParticles(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticles(const InputDataType &, BinsType &)) [1/1=100.0%] binning.cpp(10,73)
  -> EXTERN: (14,20) aligned_alloc(size_t, size_t) noexcept(true)
  -> EXTERN: (15,20) aligned_alloc(size_t, size_t) noexcept(true)
  -> EXTERN: (21,53) cosf(float) noexcept(true)
  -> EXTERN: (22,53) sinf(float) noexcept(true)
  -> EXTERN: (33,3) free(void *) noexcept(true)
  -> EXTERN: (34,3) free(void *) noexcept(true)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at binning.cpp(18,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at binning.cpp(18,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at binning.cpp(18,3)
      remark #15388: vectorization support: reference at (18:3) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 5
      remark #15309: vectorization support: normalized vectorization overhead 0.120
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 0.710 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 10  
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END
LOOP END

LOOP BEGIN at binning.cpp(19,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at binning.cpp(20,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at binning.cpp(20,5)
      remark #25427: Loop Statements Reordered
      remark #15389: vectorization support: reference inputData->phi[ii-33554432*U2_V] has unaligned access   [ binning.cpp(22,57) ]
      remark #15389: vectorization support: reference inputData->r[ii-33554432*U2_V] has unaligned access   [ binning.cpp(22,23) ]
      remark #15389: vectorization support: reference iY has unaligned access   [ binning.cpp(24,7) ]
      remark #15389: vectorization support: reference inputData->r[ii-33554432*U2_V] has unaligned access   [ binning.cpp(21,23) ]
      remark #15388: vectorization support: reference iX has aligned access   [ binning.cpp(23,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15412: vectorization support: streaming store was generated for iX   [ binning.cpp(23,7) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.219
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15467: unmasked aligned streaming stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 235 
      remark #15477: vector cost: 13.120 
      remark #15478: estimated potential speedup: 17.900 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=4194304
   LOOP END

   LOOP BEGIN at binning.cpp(20,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at binning.cpp(28,5)
      remark #15389: vectorization support: reference iX has unaligned access   [ binning.cpp(29,20) ]
      remark #15389: vectorization support: reference iY has unaligned access   [ binning.cpp(29,30) ]
      remark #15389: vectorization support: reference iX has unaligned access   [ binning.cpp(29,20) ]
      remark #15389: vectorization support: reference iY has unaligned access   [ binning.cpp(29,30) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15416: vectorization support: irregularly indexed store was generated for the variable <at (29:9)>, part of index is read from memory   [ binning.cpp(29,9) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <at (29:9)>, part of index is read from memory   [ binning.cpp(29,9) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.084
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 15 
      remark #15477: vector cost: 71.500 
      remark #15478: estimated potential speedup: 0.200 
      remark #15488: --- end vector cost summary ---
      remark #15499: histogram: 1 
      remark #25439: unrolled with remainder by 12  
   LOOP END

   LOOP BEGIN at binning.cpp(28,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at binning.cpp(18,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at binning.cpp(18,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between outputBins[$i1][$i2] (18:3) and *outputBins (18:3)
      remark #15346: vector dependence: assumed ANTI dependence between *outputBins (18:3) and outputBins[$i1][$i2] (18:3)
      remark #25436: completely unrolled by 10  
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END
LOOP END

LOOP BEGIN at binning.cpp(18,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at binning.cpp(18,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between at (18:3) and at (18:3)
      remark #15346: vector dependence: assumed ANTI dependence between at (18:3) and at (18:3)
      remark #25436: completely unrolled by 10  
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END

   LOOP BEGIN at binning.cpp(18,3)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

binning.cpp(10,73):remark #34051: REGISTER ALLOCATION : [_Z12BinParticlesRK13InputDataTypeRA10_A10_i] binning.cpp:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6 zmm8-zmm11 zmm16]
        
    Routine temporaries
        Total         :     500
            Global    :      61
            Local     :     439
        Regenerable   :      73
        Spilled       :      12
        
    Routine stack
        Variables     :     464 bytes*
            Reads     :     107 [1.98e-01 ~ 0.2%]
            Writes    :     109 [9.90e-01 ~ 1.0%]
        Spills        :     136 bytes*
            Reads     :      45 [9.11e+00 ~ 9.1%]
            Writes    :      40 [3.88e+00 ~ 3.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
