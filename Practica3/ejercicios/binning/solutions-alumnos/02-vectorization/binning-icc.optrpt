Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.10.0 Build 20230609_000000

Compiler options: -g -std=c++20 -Wall -xHost -O2 -qopenmp -o binning-icc -qopt-report=5 -qopt-report-file=binning-icc.optrpt

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: BinParticles(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticles(const InputDataType &, BinsType &)) [1/1=100.0%] binning.cpp(10,73)
  -> EXTERN: (12,20) aligned_alloc(size_t, size_t) noexcept(true)
  -> EXTERN: (13,20) aligned_alloc(size_t, size_t) noexcept(true)
  -> EXTERN: (18,48) cosf(float) noexcept(true)
  -> EXTERN: (19,48) sinf(float) noexcept(true)
  -> EXTERN: (30,3) free(void *) noexcept(true)
  -> EXTERN: (31,3) free(void *) noexcept(true)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at binning.cpp(16,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at binning.cpp(16,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at binning.cpp(16,3)
   remark #25427: Loop Statements Reordered
   remark #15389: vectorization support: reference inputData->phi[i] has unaligned access   [ binning.cpp(19,52) ]
   remark #15389: vectorization support: reference inputData->r[i] has unaligned access   [ binning.cpp(19,21) ]
   remark #15389: vectorization support: reference iY has unaligned access   [ binning.cpp(21,5) ]
   remark #15389: vectorization support: reference inputData->r[i] has unaligned access   [ binning.cpp(18,21) ]
   remark #15389: vectorization support: reference iX has unaligned access   [ binning.cpp(20,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.217
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 235 
   remark #15477: vector cost: 13.250 
   remark #15478: estimated potential speedup: 16.530 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at binning.cpp(16,3)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at binning.cpp(25,3)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

    Report from: Code generation optimizations [cg]

binning.cpp(10,73):remark #34051: REGISTER ALLOCATION : [_Z12BinParticlesRK13InputDataTypeRA10_A10_i] binning.cpp:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6 zmm8-zmm9 zmm16]
        
    Routine temporaries
        Total         :     202
            Global    :      50
            Local     :     152
        Regenerable   :      54
        Spilled       :       4
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       8 [1.08e+00 ~ 1.1%]
            Writes    :       8 [3.79e+00 ~ 3.8%]
        Spills        :      72 bytes*
            Reads     :      21 [4.36e+00 ~ 4.4%]
            Writes    :      19 [3.80e+00 ~ 3.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
